<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xing Yahao</title>
    <link>https://xingyahao.com/</link>
    <description>Recent content on Xing Yahao</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>© Xing Yahao</copyright>
    <lastBuildDate>Tue, 31 Dec 2024 09:21:51 +0900</lastBuildDate>
    <atom:link href="https://xingyahao.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS ECSの日常運用とセキュリティの改善ためのE1sの使用</title>
      <link>https://xingyahao.com/posts/integrate-e1s-to-improve-aws-ecs-daily-operations-with-security-ja/</link>
      <pubDate>Tue, 31 Dec 2024 09:21:51 +0900</pubDate>
      <guid>https://xingyahao.com/posts/integrate-e1s-to-improve-aws-ecs-daily-operations-with-security-ja/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;いまのでは、私がいるSREチームは開発者がORMメソッドを通じてデータベースにアクセスできる機能を提供していました。これには、セキュリティを確保しながら本番環境の最新スキーマを維持する必要のため、本番環境複製して、開発者アクセス用の環境を提供してきました。&lt;/p&gt;&#xA;&lt;p&gt;以前、システムの本番トラフィックは完全にEC2からECSに移行しましたが、データベースアクセスのワークフローはレガシーな移行が完了していなかったため、引き続き専用のEC2インスタンスに依存していました。しかし、このアプローチにはいくつかの課題がありました：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;SSHキーの管理&lt;/strong&gt;：サーバーアクセス用&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;スケーラビリティの制限&lt;/strong&gt;：運用オーバーヘッド&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;複雑なCI/CDパイプライン&lt;/strong&gt;：EC2インスタンスに紐づいている&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;高額なAWSコスト&lt;/strong&gt;：継続的なEC2使用による&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;セキュリティリスク&lt;/strong&gt;：粒度の低いアクセス制御と限られた監査機能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;これらの問題に対処するため、&lt;a href=&#34;https://github.com/keidarcy/e1s&#34;&gt;e1s&lt;/a&gt;（ターミナルでECSリソースを管理するCLIツール）をECS Execと統合し、データベースアクセスのEC2ベースのワークフローを置き換えました。この移行により、運用が簡素化され、コストが削減され、セキュリティが向上しました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;旧ワークフローと新ワークフローの比較&#34;&gt;旧ワークフローと新ワークフローの比較&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;旧ワークフロー：専用EC2インスタンス経由のアクセス&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;チームメンバーは特定のEC2サーバーにSSHキーを使用してログイン&lt;/li&gt;&#xA;&lt;li&gt;運用タスクはこれらのインスタンス上で手動実行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://storage.googleapis.com/zenn-user-upload/cbe42adfc429-20241231.png&#34; alt=&#34;old-workflow.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;新ワークフロー：e1sを使用したECSベースの運用&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;チームメンバーは、&lt;a href=&#34;https://github.com/onelogin/onelogin-python-aws-assume-role&#34;&gt;onelogin aws assume role cli&lt;/a&gt;（OneLoginは私たちの会社全体で使用しているIDプロバイダー）を使用して、AWSの一時的な認証情報を取得します。&lt;/li&gt;&#xA;&lt;li&gt;セキュリティ上の理由から、本番コンテナのexecは無効にしたままで、運用コンテナに対してECS Execアクセスを有効にします。&lt;/li&gt;&#xA;&lt;li&gt;チームメンバーは、&lt;a href=&#34;https://github.com/keidarcy/e1s&#34;&gt;e1s&lt;/a&gt;を使用し、特定のAWS認証情報でECS Execを簡単に実行して、監査ログが完全に記録された状態でコンテナを操作します。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://storage.googleapis.com/zenn-user-upload/c733932fd992-20241231.png&#34; alt=&#34;new-workflow.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;メリット概要&#34;&gt;メリット概要&lt;/h2&gt;&#xA;&lt;h3 id=&#34;複雑さの軽減&#34;&gt;&lt;strong&gt;複雑さの軽減&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SSHキーと専用EC2サーバーの必要性を排除し、キー管理に関連する手動運用を削減&lt;/li&gt;&#xA;&lt;li&gt;EC2デプロイメント要件を削除することでCIワークフローを簡素化&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;セキュリティの強化&#34;&gt;&lt;strong&gt;セキュリティの強化&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SSHキーの管理が不要となり、忘れたり紛失したりするリスクを排除&lt;/li&gt;&#xA;&lt;li&gt;本番環境のシークレットを特定のECSコンテナに分離&lt;/li&gt;&#xA;&lt;li&gt;OneLogin付与のIAMロールを通じてロールベースのアクセス制御（RBAC）を強制&lt;/li&gt;&#xA;&lt;li&gt;ECS Execの出力をS3にログ記録し、監査とトレーサビリティを向上&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;コスト効率&#34;&gt;&lt;strong&gt;コスト効率&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;継続的なEC2インスタンスを削除することでAWS費用を大幅に削減&lt;/li&gt;&#xA;&lt;li&gt;EC2固有のデプロイメントパイプラインを排除することでCIコストを削減&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;&#xA;&lt;p&gt;現代のテックチームにとって、インフラストラクチャのセキュリティと運用効率の管理は重要です。&lt;a href=&#34;https://github.com/keidarcy/e1s&#34;&gt;e1s&lt;/a&gt;への移行により、私たちの運用はよりスリムで、より安全で、よりコスト効率の良いワークフローへと改善されました。&lt;a href=&#34;https://github.com/keidarcy/e1s&#34;&gt;e1s&lt;/a&gt;が皆様のツールキットの一部となり、私たちと同様に運用を簡素化することを願っています！&lt;/p&gt;</description>
    </item>
    <item>
      <title>Integrate E1s to Improve AWS ECS Daily Operations with Security</title>
      <link>https://xingyahao.com/posts/integrate-e1s-to-improve-aws-ecs-daily-operations-with-security/</link>
      <pubDate>Tue, 31 Dec 2024 09:21:51 +0900</pubDate>
      <guid>https://xingyahao.com/posts/integrate-e1s-to-improve-aws-ecs-daily-operations-with-security/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In my organization, we maintained a feature that allows developers to access databases via ORM methods. This required duplicating the environment to provide a separate environment for developer access, ensuring security while maintaining an up-to-date deployment with the latest schema for production.&lt;/p&gt;&#xA;&lt;p&gt;Previously, we had fully migrated the system production traffic from EC2 to ECS, but the database access workflow continued to rely on dedicated EC2 instances due to the incomplete legacy migration. However, this approach introduced several challenges:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Migrating Next.js Landing Page Projects from Vercel to AWS</title>
      <link>https://xingyahao.com/posts/migrating-next-js-landing-page-projects-from-vercel-to-aws/</link>
      <pubDate>Mon, 30 Dec 2024 11:46:46 +0900</pubDate>
      <guid>https://xingyahao.com/posts/migrating-next-js-landing-page-projects-from-vercel-to-aws/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;My team manages multiple landing page projects, including around 100,000 pages. Vercel initially served us well, especially with its preview URL feature for rapid feedback and built-in Next.js support to start development quickly. However, many of you may have seen this famous tweet about the surprising Vercel cost.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://storage.googleapis.com/zenn-user-upload/f33169715eb4-20241231.png&#34; alt=&#34;Screenshot 2024-12-30 at 14.40.48.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;My team experienced a similar moment: our monthly costs jumped from ~$2,000 to ~$3,500 due to a single server error happening in one day. This led us to migrate to AWS ECS, a decision that significantly &lt;strong&gt;improved performance and cost efficiency.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>タイムスライスSLOでDatadogのSLO管理を効率化する</title>
      <link>https://xingyahao.com/posts/streamlining-datadog-slo-management-with-time-slice-slos/</link>
      <pubDate>Fri, 27 Dec 2024 11:52:46 +0900</pubDate>
      <guid>https://xingyahao.com/posts/streamlining-datadog-slo-management-with-time-slice-slos/</guid>
      <description>&lt;h3 id=&#34;はじめに&#34;&gt;はじめに&lt;/h3&gt;&#xA;&lt;p&gt;DatadogのSLOには3種類のオプションがあります：モニターベース SLO (&lt;a href=&#34;https://docs.datadoghq.com/service_management/service_level_objectives/monitor/&#34;&gt;Monitor-based SLOs&lt;/a&gt;)、メトリクスベース SLO (&lt;a href=&#34;https://docs.datadoghq.com/service_management/service_level_objectives/metric/&#34;&gt;Metric-based SLOs&lt;/a&gt;)、そして新しく追加されたタイムスライス SLO (&lt;a href=&#34;https://docs.datadoghq.com/service_management/service_level_objectives/time_slice/&#34;&gt;Time Slice SLOs&lt;/a&gt;)です。&lt;/p&gt;&#xA;&lt;p&gt;今回は、特にタイムスライス SLOの利便性とメリットについて、具体例を挙げて説明します。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;従来の方法-モニターベース-slo&#34;&gt;従来の方法: モニターベース SLO&lt;/h3&gt;&#xA;&lt;p&gt;タイムスライス SLOが登場する以前、たとえばNode.jsのExpress APIにおけるレイテンシーSLOを作成する場合、&lt;strong&gt;モニターベース SLO&lt;/strong&gt;を使用して次のように設定していました。以下はTerraformを使った例です。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;datadog_monitor&amp;#34; &amp;#34;request_get_latency&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name    &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;📝 [SLO] Resource Get API has an abnormal latency&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  type    &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;query alert&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Resource Get API latency is above 1 second&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  query   &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; &amp;lt;&amp;lt;&lt;span style=&#34;color:#fe8019&#34;&gt;EOT&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;percentile&lt;/span&gt;(&lt;span style=&#34;color:#fe8019&#34;&gt;last_5m&lt;/span&gt;):&lt;span style=&#34;color:#fe8019&#34;&gt;p95&lt;/span&gt;:&lt;span style=&#34;color:#fe8019&#34;&gt;trace&lt;/span&gt;.&lt;span style=&#34;color:#fe8019&#34;&gt;express&lt;/span&gt;.&lt;span style=&#34;color:#fe8019&#34;&gt;request&lt;/span&gt;{&lt;span style=&#34;color:#fe8019&#34;&gt;resource_name&lt;/span&gt;:&lt;span style=&#34;color:#fe8019&#34;&gt;get_&lt;/span&gt;&lt;span style=&#34;color:#b8bb26&#34;&gt;${&lt;/span&gt;local.path&lt;span style=&#34;color:#b8bb26&#34;&gt;}&lt;/span&gt;} &amp;gt; &lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;EOT&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#fe8019&#34;&gt;monitor_thresholds&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    critical &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#d3869b&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt; # 1秒&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  evaluation_delay    &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;300&lt;/span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt; # 5分&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;  require_full_window &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;datadog_service_level_objective&amp;#34; &amp;#34;request_get_latency&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name        &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;🏝️ Get API p95 latency *monitor* SLO&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  type        &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;monitor&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  description &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;99.9%の時間、Get APIのp95レイテンシーが1秒以下であること。&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#fe8019&#34;&gt;thresholds&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    timeframe &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;30d&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    target    &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;99&lt;/span&gt;.&lt;span style=&#34;color:#d3869b&#34;&gt;9&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  monitor_ids &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fe8019&#34;&gt;datadog_monitor&lt;/span&gt;.&lt;span style=&#34;color:#fe8019&#34;&gt;request_get_latency&lt;/span&gt;.&lt;span style=&#34;color:#fe8019&#34;&gt;id&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;モニターベース SLOでは、SLOを作成する前にモニターの定義が必要です。この手間を軽減するために、タイムスライス SLOが登場しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Improving DX and Reducing SRE Toil with TypeScript Terraform Infrastructure</title>
      <link>https://xingyahao.com/posts/improving-dx-and-reducing-sre-toil-with-typescript-terraform-infrastructure/</link>
      <pubDate>Tue, 17 Dec 2024 09:21:51 +0900</pubDate>
      <guid>https://xingyahao.com/posts/improving-dx-and-reducing-sre-toil-with-typescript-terraform-infrastructure/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://storage.googleapis.com/zenn-user-upload/efd42572ae73-20241217.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;&#xA;&lt;p&gt;While managing infrastructure resources on service providers like AWS and GCP for multiple services, our engineering team frequently needed simple infrastructure changes - creating S3 buckets, modifying CloudFront behaviors, or updating IAM permissions. While we used Terraform, developers weren&amp;rsquo;t comfortable with HCL (HashiCorp Configuration Language), creating redundant or repetitive work for SRE team.&lt;/p&gt;&#xA;&lt;p&gt;After evaluating several Infrastructure as Code (IaC) solutions including Pulumi, AWS CDK, AWS CloudFormation, we chose &lt;a href=&#34;https://developer.hashicorp.com/terraform/cdktf&#34;&gt;CDK for Terraform&lt;/a&gt; (CDKTF) because it offered:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introducing E1s the K9s Inspired Cli for Aws Ecs</title>
      <link>https://xingyahao.com/posts/introducing-e1s-the-k9s-inspired-cli-for-aws-ecs/</link>
      <pubDate>Fri, 19 Apr 2024 09:21:51 +0900</pubDate>
      <guid>https://xingyahao.com/posts/introducing-e1s-the-k9s-inspired-cli-for-aws-ecs/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://storage.googleapis.com/zenn-user-upload/84798ff12916-20240531.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re working with AWS ECS like me, no matter whether with Fargate or EC2, managing resources can sometimes be a challenge to using aws-cli. You might look for something that brings the ease of k9s to k8s, thee1s aims to become the tool you&amp;rsquo;ve been waiting for.&#xA;If you&amp;rsquo;re working with AWS ECS, managing resources with aws-cli can sometimes be a challenge, whether you&amp;rsquo;re using Fargate or EC2. For those seeking the ease of k9s for Kubernetes, e1s is the tool you&amp;rsquo;ve been waiting for.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How Do We Optimize Mongodb Latency and Save Money</title>
      <link>https://xingyahao.com/posts/how-do-we-optimize-mongodb-latency-and-save-money/</link>
      <pubDate>Thu, 04 Jan 2024 22:21:06 +0900</pubDate>
      <guid>https://xingyahao.com/posts/how-do-we-optimize-mongodb-latency-and-save-money/</guid>
      <description>&lt;h1 id=&#34;context&#34;&gt;Context&lt;/h1&gt;&#xA;&lt;p&gt;My organization has used MongoDB on MongoDB Atlas for over 6 years. Our backend API language is TypeScript, and we use Mongoose as our ORM. While we appreciate our tech stack&amp;rsquo;s productivity, we also find it challenging to improve server endpoint latency and balance cloud costs.&lt;/p&gt;&#xA;&lt;p&gt;As our active users and product grew this year, we noticed a significant regression in endpoint response time. This indicated a major issue with MongoDB’s performance. As a temporary solution, we scaled up the production cluster tiers, resulting in a 40% increase in our billing. The following graphs are the average MongoDB read latency and monthly billing shift before the project. As you can see we were facing a critical period.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Javascript Monorepo Development Improvement Approaches</title>
      <link>https://xingyahao.com/posts/javascript-monorepo-development-improvement-approaches/</link>
      <pubDate>Mon, 16 Jan 2023 09:25:36 +0900</pubDate>
      <guid>https://xingyahao.com/posts/javascript-monorepo-development-improvement-approaches/</guid>
      <description>&lt;p&gt;Monorepo (monorepo) refers to a pattern where all code of an application or microservice is stored in a single monolithic repository (usually Git).&lt;/p&gt;&#xA;&lt;p&gt;Until now, both backend and frontend have been managed in the same repository, the so-called JavaScript monorepo. The &lt;a href=&#34;https://classic.yarnpkg.com/en/docs/yarn-workflow&#34;&gt;yarn workspace&lt;/a&gt; function is mainly used to share the backend/frontend and logic code, and also to avoid the need to switch between the two repositories. No more need to send out code reviews to multiple repositories. We were able to develop quickly because we only needed to clone and modify one repository.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript Monorepo 開発改善への取り組みについて(Japanese)</title>
      <link>https://xingyahao.com/posts/javascript-monorepo-development-improvement-approaches-ja/</link>
      <pubDate>Fri, 16 Dec 2022 09:25:36 +0900</pubDate>
      <guid>https://xingyahao.com/posts/javascript-monorepo-development-improvement-approaches-ja/</guid>
      <description>&lt;p&gt;Monorepo(モノレポ)とは、アプリケーションやマイクロサービスの全コードを単一のモノリシックなリポジトリ (普通は Git) に保存するパターンを指します。&lt;/p&gt;&#xA;&lt;p&gt;今まで backend/frontend ともに JavaScript で同じリポジトリで管理されて、いわゆる JavaScript の モノレポです。主に &lt;a href=&#34;https://classic.yarnpkg.com/en/docs/yarn-workflow&#34;&gt;yarn workspace&lt;/a&gt; 機能を使って、backend/frontend とロジックのコードをシェアーして、また、それぞれのレポジトリの切り替えが必要なく、コードレビューを複数に出す必要もなくなりました。一つのリポジトリさえクローンして修正すればいいので、素早く開発できました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://storage.googleapis.com/zenn-user-upload/0b6954535479-20240604.png&#34; alt=&#34;Multi-Repo vs Monorepo&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;しかし、一年前状況を振り返ったら、二つ大きな問題点があります。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://classic.yarnpkg.com/lang/en/&#34;&gt;yarn 1&lt;/a&gt; (以降 yarn と呼びます)の機能不足(詳細は&lt;a href=&#34;https://xingyahao.com/posts/npm-yarn-pnpm-ja/&#34;&gt;去年の記事&lt;/a&gt;)で新規プロジェクトを同じリポジトリに workspace の package として作れないこと。&lt;/li&gt;&#xA;&lt;li&gt;環境のローカルサーバが立ち上がるのが 120 秒以上かかるなど開発者体験が悪いことです。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;チーム内に一度今後の構成について、モノレポかマルチレポか議論が上がりましたが、その時はプロジェクトのスケジュールを優先してマルチレポを選びました。しかし共通コンポーネントが共有しづらいとか、複数のレポジトリにまたがる開発のコードレビューが難しいとか、開発の効率がモノレポより下がっていることがわかっていました。&lt;/p&gt;&#xA;&lt;p&gt;これら改善のタスクは私のチームに任させて、今年に色々施策して、改善してきました。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;新規の package を元のモノレポ配下に作ることができて、既存のロジックなどを簡易に再利用できました。&lt;/li&gt;&#xA;&lt;li&gt;ローカルサーバの立ち上がる時間は元の50%まで激減して、開発者体験向上や開発スピードが上がりました。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;様々な取り組み&#34;&gt;様々な取り組み&lt;/h1&gt;&#xA;&lt;h2 id=&#34;shared-リポジトリの作成&#34;&gt;shared リポジトリの作成&lt;/h2&gt;&#xA;&lt;p&gt;当時モノレポかマルチレポかまだ決まっていない段階で、取り敢えずコードシェアーが目の前の問題なので、&lt;a href=&#34;https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-npm-registry&#34;&gt;Github private npm registery&lt;/a&gt; を利用して、複数箇所にコピペされていたコードをnpm packageにして、共有できました。&lt;a href=&#34;https://lerna.js.org/&#34;&gt;Lerna&lt;/a&gt; を使って、backend/frontend/共通 それぞれの package を作って複数のリポジトリに必要なロジックを該当の package 移して、更新したら、CIで新バージョンを publish と作りました。&lt;/p&gt;&#xA;&lt;p&gt;しかし、実際に運用してみたら、以下の問題点があります。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;shared リポジトリのコードを更新したら、新しいバージョンの更新のCIを待つ必要がある&lt;/li&gt;&#xA;&lt;li&gt;プロジェクトのリポジトリのバージョンは頻繁に更新&lt;/li&gt;&#xA;&lt;li&gt;新しいエンジニアに shared リポジトリの使い方の教育&lt;/li&gt;&#xA;&lt;li&gt;ロジックが分散し、デバッグが難しい&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;これらが shared リポジトリの特徴なので、解決しづらいと認識して、今後もモノレポの方針を固めました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;yarn-berry-に移行&#34;&gt;yarn berry に移行&lt;/h2&gt;&#xA;&lt;p&gt;yarn の &lt;a href=&#34;https://classic.yarnpkg.com/blog/2018/02/15/nohoist/&#34;&gt;hoist&lt;/a&gt; が workspace メインの問題点なので、hoist を解決するため、色々試してみました。まず、yarn の nohoist を利用しましたが、結果根本的に解決できません。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Shortcomings of npm/yarn and reasons for recommending pnpm</title>
      <link>https://xingyahao.com/posts/npm-yarn-pnpm/</link>
      <pubDate>Mon, 10 Jan 2022 11:52:46 +0900</pubDate>
      <guid>https://xingyahao.com/posts/npm-yarn-pnpm/</guid>
      <description>&lt;h2 id=&#34;what-is-pnpm&#34;&gt;What is pnpm?&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://pnpm.io/&#34;&gt;pnpm&lt;/a&gt; According to the official website, pnpm stands for performant npm.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Fast, disk space efficient package manager&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;So, pnpm is similar to npm/yarn. Currently (December 2021), many major open source projects (&lt;a href=&#34;https://github.com/vuejs/vue-next&#34;&gt;vue&lt;/a&gt;, &lt;a href=&#34;https://github.com/prisma/prisma&#34;&gt;prisma&lt;/a&gt;&amp;hellip;) use pnpm. This article will look at the shortcomings of npm/yarn and how pnpm solved them in detail.&lt;/p&gt;&#xA;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&#xA;&lt;p&gt;npm/yarn - Shortcomings&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The flat node_modules structure allows access to any package that is not referenced.&lt;/li&gt;&#xA;&lt;li&gt;Packages from different projects cannot be shared, resulting in disk space consumption.&lt;/li&gt;&#xA;&lt;li&gt;Installation speed is slow, and there are duplicate installations in node_modules.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;pnpm - Solution&lt;/p&gt;</description>
    </item>
    <item>
      <title>npm/yarn の不足点と pnpm を推す理由(Japanese)</title>
      <link>https://xingyahao.com/posts/npm-yarn-pnpm-ja/</link>
      <pubDate>Mon, 06 Dec 2021 11:46:46 +0900</pubDate>
      <guid>https://xingyahao.com/posts/npm-yarn-pnpm-ja/</guid>
      <description>&lt;h2 id=&#34;pnpmとは&#34;&gt;pnpmとは&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://pnpm.io/&#34;&gt;pnpm&lt;/a&gt; 公式サイトによると、pnpmはperformant npmを表しています。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Fast, disk space efficient package manager&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;なので、pnpmはnpm/yarn同じような存在です。現在（2021年12月）、たくさんメジャーのオープンソースプロジェクト（&lt;a href=&#34;https://github.com/vuejs/vue-next&#34;&gt;vue&lt;/a&gt;、&lt;a href=&#34;https://github.com/prisma/prisma&#34;&gt;prisma&lt;/a&gt;&amp;hellip;）は pnpmを使用しています。本文はnpm/yarnの不足点、とpnpmはどっやって解決したのかついにて詳細を見てみます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;&#xA;&lt;p&gt;npm/yarn - 不足点&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;フラットのnode_modules構造は、引用していない任意のパッケージにもアクセスできてしまう。&lt;/li&gt;&#xA;&lt;li&gt;違うプロジェクトのパッケージが共有できなくて、ディスク容量消耗になる。&lt;/li&gt;&#xA;&lt;li&gt;インストールのスピードが遅い、node_modulesに重複のインストールがある。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;pnpm - 解決法&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;シンボリックリンクを用い独自のnode_modules構造を使用して、package.jsonにあるものしかアクセスできない（厳格）。&lt;/li&gt;&#xA;&lt;li&gt;インストールするパッケージはグローバルストアからハードリンクされ、ディスク容量をセーブ（効率的）。&lt;/li&gt;&#xA;&lt;li&gt;上記の対応で、インストールも早くなる（速い）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;厳格、効率的、速いとモノリポサポートも公式サイトから、pnpmの特徴と言われています。ただ、npm8とyarnもモノリポサポートなので、一応不足点だと考えていないです。pnpmのモノリポをサポートは最後で少し話します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ディスクスペース&#34;&gt;ディスクスペース&lt;/h2&gt;&#xA;&lt;h3 id=&#34;npmyarn---ディスクスペース消耗のnode_modules&#34;&gt;npm/yarn - ディスクスペース消耗のnode_modules&lt;/h3&gt;&#xA;&lt;p&gt;npm/yarnはディスク容量使いすぎという不足点があって、同じパッケージを100回分インストールしたら、100分のパッケージがnode_modulesのディスクに保存されます。日常の例では、前のプロジェクトが終わって、node_modulesがそのまま残ってしまったら、大量のディスク容量を使うことがよくあります。これを解決するため、&lt;a href=&#34;https://npkill.js.org/&#34;&gt;npkill&lt;/a&gt;がよく使われます。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npx npkill&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;で現在フォルダ配下で全てのnode_modulesをスキャンして、動的で削除できます。&lt;/p&gt;&#xA;&lt;h3 id=&#34;pnpm---効率的なディスクスペース&#34;&gt;pnpm - 効率的なディスクスペース&lt;/h3&gt;&#xA;&lt;p&gt;一方、pnpmはパッケージを同一フォルダ（content-addressable store）に保存して、同じパッケージの同じばジョンを再度インストールしたら、ハードリンクを作るだけです。MacOsデフォルトの場所は~/.pnpm-storeになります。しかも、同じパッケージの違うバージョンは差分だけが新たに保存されます。そうしたら、インストールする時に、storeにあったら、再利用、なければ、ダンロードしてstoreに保存する形になります。&lt;/p&gt;&#xA;&lt;p&gt;ハードリンクを使って、できたことは&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;インストールが非常に高速(&lt;a href=&#34;https://pnpm.io/benchmarks&#34;&gt;ベンチマーク&lt;/a&gt;でyarnの&lt;a href=&#34;https://classic.yarnpkg.com/en/docs/pnp/&#34;&gt;pnpモード&lt;/a&gt;より早い)&lt;/li&gt;&#xA;&lt;li&gt;ディスク容量節約&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;以下はexpressをインストールしたことがあるパソコンで再インストールする時のアウトプットです。ついでに、npm/yarnインストール時のアウトプットも貼っておきます。&lt;/p&gt;&#xA;&lt;p&gt;pnpm&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;$&lt;/span&gt; pnpm i express&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Packages: &lt;span style=&#34;color:#fe8019&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#d3869b&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Progress: resolved &lt;span style=&#34;color:#d3869b&#34;&gt;52&lt;/span&gt;, reused &lt;span style=&#34;color:#d3869b&#34;&gt;52&lt;/span&gt;, downloaded &lt;span style=&#34;color:#d3869b&#34;&gt;0&lt;/span&gt;, added &lt;span style=&#34;color:#d3869b&#34;&gt;0&lt;/span&gt;, done&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;+&lt;/span&gt; express &lt;span style=&#34;color:#d3869b&#34;&gt;4.17&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;npm&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npm i express&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm WARN npm@1.0.0 No description&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm WARN npm@1.0.0 No repository field.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+ express@4.17.1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;added 50 packages from 37 contributors and audited 50 packages in 4.309s&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;found 0 vulnerabilities&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;yarn&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
