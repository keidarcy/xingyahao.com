<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xing Yahao</title>
    <link>https://xingyahao.com/</link>
    <description>Recent content on Xing Yahao</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>© Xing Yahao</copyright>
    <lastBuildDate>Fri, 19 Apr 2024 09:21:51 +0900</lastBuildDate>
    <atom:link href="https://xingyahao.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introducing E1s the K9s Inspired Cli for Aws Ecs</title>
      <link>https://xingyahao.com/posts/introducing-e1s-the-k9s-inspired-cli-for-aws-ecs/</link>
      <pubDate>Fri, 19 Apr 2024 09:21:51 +0900</pubDate>
      <guid>https://xingyahao.com/posts/introducing-e1s-the-k9s-inspired-cli-for-aws-ecs/</guid>
      <description>If you&amp;rsquo;re working with AWS ECS like me, no matter whether with Fargate or EC2, managing resources can sometimes be a challenge to using aws-cli. You might look for something that brings the ease of k9s to k8s, thee1s aims to become the tool you&amp;rsquo;ve been waiting for. If you&amp;rsquo;re working with AWS ECS, managing resources with aws-cli can sometimes be a challenge, whether you&amp;rsquo;re using Fargate or EC2. For those seeking the ease of k9s for Kubernetes, e1s is the tool you&amp;rsquo;ve been waiting for.</description>
    </item>
    <item>
      <title>How Do We Optimize Mongodb Latency and Save Money</title>
      <link>https://xingyahao.com/posts/how-do-we-optimize-mongodb-latency-and-save-money/</link>
      <pubDate>Thu, 04 Jan 2024 22:21:06 +0900</pubDate>
      <guid>https://xingyahao.com/posts/how-do-we-optimize-mongodb-latency-and-save-money/</guid>
      <description>Context My organization has used MongoDB on MongoDB Atlas for over 6 years. Our backend API language is TypeScript, and we use Mongoose as our ORM. While we appreciate our tech stack&amp;rsquo;s productivity, we also find it challenging to improve server endpoint latency and balance cloud costs.&#xA;As our active users and product grew this year, we noticed a significant regression in endpoint response time. This indicated a major issue with MongoDB’s performance.</description>
    </item>
    <item>
      <title>Javascript Monorepo Development Improvement Approaches</title>
      <link>https://xingyahao.com/posts/javascript-monorepo-development-improvement-approaches/</link>
      <pubDate>Mon, 16 Jan 2023 09:25:36 +0900</pubDate>
      <guid>https://xingyahao.com/posts/javascript-monorepo-development-improvement-approaches/</guid>
      <description>Monorepo (monorepo) refers to a pattern where all code of an application or microservice is stored in a single monolithic repository (usually Git).&#xA;Until now, both backend and frontend have been managed in the same repository, the so-called JavaScript monorepo. The yarn workspace function is mainly used to share the backend/frontend and logic code, and also to avoid the need to switch between the two repositories. No more need to send out code reviews to multiple repositories.</description>
    </item>
    <item>
      <title>JavaScript Monorepo 開発改善への取り組みについて(Japanese)</title>
      <link>https://xingyahao.com/posts/javascript-monorepo-development-improvement-approaches-ja/</link>
      <pubDate>Fri, 16 Dec 2022 09:25:36 +0900</pubDate>
      <guid>https://xingyahao.com/posts/javascript-monorepo-development-improvement-approaches-ja/</guid>
      <description>Monorepo(モノレポ)とは、アプリケーションやマイクロサービスの全コードを単一のモノリシックなリポジトリ (普通は Git) に保存するパターンを指します。&#xA;今まで backend/frontend ともに JavaScript で同じリポジトリで管理されて、いわゆる JavaScript の モノレポです。主に yarn workspace 機能を使って、backend/frontend とロジックのコードをシェアーして、また、それぞれのレポジトリの切り替えが必要なく、コードレビューを複数に出す必要もなくなりました。一つのリポジトリさえクローンして修正すればいいので、素早く開発できました。&#xA;しかし、一年前状況を振り返ったら、二つ大きな問題点があります。&#xA;yarn 1 (以降 yarn と呼びます)の機能不足(詳細は去年の記事)で新規プロジェクトを同じリポジトリに workspace の package として作れないこと。 環境のローカルサーバが立ち上がるのが 120 秒以上かかるなど開発者体験が悪いことです。 チーム内に一度今後の構成について、モノレポかマルチレポか議論が上がりましたが、その時はプロジェクトのスケジュールを優先してマルチレポを選びました。しかし共通コンポーネントが共有しづらいとか、複数のレポジトリにまたがる開発のコードレビューが難しいとか、開発の効率がモノレポより下がっていることがわかっていました。&#xA;これら改善のタスクは私のチームに任させて、今年に色々施策して、改善してきました。&#xA;新規の package を元のモノレポ配下に作ることができて、既存のロジックなどを簡易に再利用できました。 ローカルサーバの立ち上がる時間は元の50%まで激減して、開発者体験向上や開発スピードが上がりました。 様々な取り組み shared リポジトリの作成 当時モノレポかマルチレポかまだ決まっていない段階で、取り敢えずコードシェアーが目の前の問題なので、Github private npm registery を利用して、複数箇所にコピペされていたコードをnpm packageにして、共有できました。Lerna を使って、backend/frontend/共通 それぞれの package を作って複数のリポジトリに必要なロジックを該当の package 移して、更新したら、CIで新バージョンを publish と作りました。&#xA;しかし、実際に運用してみたら、以下の問題点があります。&#xA;shared リポジトリのコードを更新したら、新しいバージョンの更新のCIを待つ必要がある プロジェクトのリポジトリのバージョンは頻繁に更新 新しいエンジニアに shared リポジトリの使い方の教育 ロジックが分散し、デバッグが難しい これらが shared リポジトリの特徴なので、解決しづらいと認識して、今後もモノレポの方針を固めました。&#xA;yarn berry に移行 yarn の hoist が workspace メインの問題点なので、hoist を解決するため、色々試してみました。まず、yarn の nohoist を利用しましたが、結果根本的に解決できません。</description>
    </item>
    <item>
      <title>Shortcomings of npm/yarn and reasons for recommending pnpm</title>
      <link>https://xingyahao.com/posts/npm-yarn-pnpm/</link>
      <pubDate>Mon, 10 Jan 2022 11:52:46 +0900</pubDate>
      <guid>https://xingyahao.com/posts/npm-yarn-pnpm/</guid>
      <description>What is pnpm? pnpm According to the official website, pnpm stands for performant npm.&#xA;Fast, disk space efficient package manager&#xA;So, pnpm is similar to npm/yarn. Currently (December 2021), many major open source projects (vue, prisma&amp;hellip;) use pnpm. This article will look at the shortcomings of npm/yarn and how pnpm solved them in detail.&#xA;Conclusion npm/yarn - Shortcomings&#xA;The flat node_modules structure allows access to any package that is not referenced.</description>
    </item>
    <item>
      <title>npm/yarn の不足点と pnpm を推す理由(Japanese)</title>
      <link>https://xingyahao.com/posts/npm-yarn-pnpm-ja/</link>
      <pubDate>Mon, 06 Dec 2021 11:46:46 +0900</pubDate>
      <guid>https://xingyahao.com/posts/npm-yarn-pnpm-ja/</guid>
      <description>pnpmとは pnpm 公式サイトによると、pnpmはperformant npmを表しています。&#xA;Fast, disk space efficient package manager&#xA;なので、pnpmはnpm/yarn同じような存在です。現在（2021年12月）、たくさんメジャーのオープンソースプロジェクト（vue、prisma&amp;hellip;）は pnpmを使用しています。本文はnpm/yarnの不足点、とpnpmはどっやって解決したのかついにて詳細を見てみます。&#xA;結論 npm/yarn - 不足点&#xA;フラットのnode_modules構造は、引用していない任意のパッケージにもアクセスできてしまう。 違うプロジェクトのパッケージが共有できなくて、ディスク容量消耗になる。 インストールのスピードが遅い、node_modulesに重複のインストールがある。 pnpm - 解決法&#xA;シンボリックリンクを用い独自のnode_modules構造を使用して、package.jsonにあるものしかアクセスできない（厳格）。 インストールするパッケージはグローバルストアからハードリンクされ、ディスク容量をセーブ（効率的）。 上記の対応で、インストールも早くなる（速い）。 厳格、効率的、速いとモノリポサポートも公式サイトから、pnpmの特徴と言われています。ただ、npm8とyarnもモノリポサポートなので、一応不足点だと考えていないです。pnpmのモノリポをサポートは最後で少し話します。&#xA;ディスクスペース npm/yarn - ディスクスペース消耗のnode_modules npm/yarnはディスク容量使いすぎという不足点があって、同じパッケージを100回分インストールしたら、100分のパッケージがnode_modulesのディスクに保存されます。日常の例では、前のプロジェクトが終わって、node_modulesがそのまま残ってしまったら、大量のディスク容量を使うことがよくあります。これを解決するため、npkillがよく使われます。&#xA;$ npx npkill で現在フォルダ配下で全てのnode_modulesをスキャンして、動的で削除できます。&#xA;pnpm - 効率的なディスクスペース 一方、pnpmはパッケージを同一フォルダ（content-addressable store）に保存して、同じパッケージの同じばジョンを再度インストールしたら、ハードリンクを作るだけです。MacOsデフォルトの場所は~/.pnpm-storeになります。しかも、同じパッケージの違うバージョンは差分だけが新たに保存されます。そうしたら、インストールする時に、storeにあったら、再利用、なければ、ダンロードしてstoreに保存する形になります。&#xA;ハードリンクを使って、できたことは&#xA;インストールが非常に高速(ベンチマークでyarnのpnpモードより早い) ディスク容量節約 以下はexpressをインストールしたことがあるパソコンで再インストールする時のアウトプットです。ついでに、npm/yarnインストール時のアウトプットも貼っておきます。&#xA;pnpm&#xA;$ pnpm i express Packages: +52 ++++++++++++++++++++++++++++++++++++++++++++++++++++ Progress: resolved 52, reused 52, downloaded 0, added 0, done dependencies: + express 4.17.1 npm&#xA;$ npm i express npm WARN npm@1.</description>
    </item>
  </channel>
</rss>
